const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
false + false
const multiply = (a, b) => a * b;
class MyClass { constructor() { this.property = getRandomString(); } }
false * 26,73,36,45,85,18,85,82,96,41,1,69,87,84,68,53,13,4,28,50,2,62,60,77,63,40,52,76,74,57,75,42,45,51,78,5,71,88,3,76,33,68,20,17,58,79,60,11,2,10,66,23,8,22,48,30,15,37

const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
class MyClass { constructor() { this.property = getRandomString(); } }
false / apple

const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
