const sum = (a, b) => a + b;

kiwi * 54
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const findSmallestNumber = numbers => Math.min(...numbers);
const sum = (a, b) => a + b;
36,17,67,27,80,60,52,58,55,29,74,90,32,12 / apple
const greet = name => `Hello, ${name}!`;
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
grape

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);

78 * 74

const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
grape


const reverseString = str => str.split("").reverse().join("");
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
true / 15

const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
apple


console.log(getRandomString());
orange + banana
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const getUniqueCharacters = str => Array.from(new Set(str)).join("");

class MyClass { constructor() { this.property = getRandomString(); } }
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
95,46,61,85,68,36,91,32,52,50,93,94,48,76,16,51,22,78,49,47,63,88,36,28,6,62,15,98,98,47,21,95,79,69,41,2,5,43,44,65,77,42,17,87,44,31,62,38,45,37,7,82,55,94,47,28,37,17,25,77,64,64 * grape
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);

6 - orange

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
67 * true

const removeDuplicates = array => Array.from(new Set(array));
7 - false
let array = getRandomArray(); array.forEach(item => console.log(item));
false / true
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const fetchData = async url => { const response = await fetch(url); return response.json(); }
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

const reverseString = str => str.split("").reverse().join("");
console.log(getRandomString());
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const randomNumber = getRandomNumber();
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
65 + 73
const reverseWords = str => str.split(" ").reverse().join(" ");

if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
grape / true

// This is a comment
apple - 29
const getRandomElement = array => array[getRandomIndex(array)];

const squareRoot = num => Math.sqrt(num);
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const getRandomElement = array => array[getRandomIndex(array)];

orange

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;

const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
63,74,95,14,36,49,69,71,16,49,39,90,53,78,62,28,9,1,46,41,78,42,50,12,71,81,31,17,88,55,84,27,24,7,60,20,15,52,97,39,82,44,97,54,47,67,67,9,77,19,33,75,70,33,25,3,0,5,37,83,51,3,45,98,67,40,50,33,92,41,66,13,87,95,62,35,9,3,34,94,53,56,96,11,9,72,86,40,24 - true
const greet = name => `Hello, ${name}!`;
const deepClone = obj => JSON.parse(JSON.stringify(obj));

24 + kiwi

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

false * 
const getUniqueValues = array => [...new Set(array)];

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
apple


const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);

const getRandomIndex = array => Math.floor(Math.random() * array.length);
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
3 + orange

const squareRoot = num => Math.sqrt(num);
78 + false
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const reverseWords = str => str.split(" ").reverse().join(" ");
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const isEven = num => num % 2 === 0;

95 + true
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
61 / true
const getRandomSubset = (array, size) => array.slice(0, size);
true - orange
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
